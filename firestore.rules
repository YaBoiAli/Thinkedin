   rules_version = '2';
   service cloud.firestore {
     match /databases/{database}/documents {
       match /thoughts/{thoughtId} {
         allow read: if request.auth != null;
         allow create: if request.auth != null
                      && request.resource.data.content is string 
                      && request.resource.data.content.size() > 0 
                      && request.resource.data.content.size() <= 1000
                      && request.resource.data.pseudonym is string
                      && (request.resource.data.timestamp == request.time || request.resource.data.timestamp is timestamp);
         // Allow reaction updates for authenticated users, and content updates by owner
         allow update: if request.auth != null 
                      && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions'])
                          || request.auth.uid == resource.data.uid);
         allow delete: if request.auth != null && request.auth.uid == resource.data.uid;
       }
       match /comments/{commentId} {
         allow read: if request.auth != null;
         // Simplified rule for debugging - just require auth and basic fields
         allow create: if request.auth != null
                      && request.resource.data.content is string 
                      && request.resource.data.content.size() > 0 
                      && request.resource.data.content.size() <= 500
                      && request.resource.data.thoughtId is string;
         // Allow users to update and delete their own comments
         allow update: if request.auth != null && request.auth.uid == resource.data.uid;
         allow delete: if request.auth != null && request.auth.uid == resource.data.uid;
       }
        match /users/{userId} {
          // Allow signed-in users to read, create, and update their own user document
          allow read, create, update: if request.auth != null
            && request.auth.uid == userId
            && (
              // Allow read (no validation needed for fields on read)
              request.method == 'get' ||

              // Allow create/update with these required fields
              (
                request.method in ['create', 'update'] &&
                request.resource.data.username is string &&
                request.resource.data.username.size() >= 3 &&
                request.resource.data.createdAt is timestamp
              )
            );

          allow delete: if false;
        }
        match /chatbot_votes/{voteId} {
          // Allow authenticated users to read all votes and create/update their own votes
          allow read: if request.auth != null;
          allow create, update: if request.auth != null
                               && request.resource.data.pseudonym is string
                               && request.resource.data.vote in ['want', 'dont'];
          allow delete: if false;
        }
     }
   }